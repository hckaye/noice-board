# 作業ガイドライン

このガイドラインは、いいね掲示板プロジェクトにおけるコードの品質と一貫性を確保するためのものです。以下のプラクティスに従って作業を進めてください。

## TypeScriptのプラクティス

- ドメインモデルを型で表現し、ビジネスロジックを型安全に実装します
- any型の使用は避け、明示的な型を指定します
- 型定義ファイルを使用して、外部ライブラリの型を明示的に定義します
- classよりもinterface、typeと関数で実装することを優先します
- 型のエイリアスを使用して、複雑な型を簡潔に表現します
- 型の再利用を促進するために、共通の型定義をモジュール化します
- 型の安全性を確保するために、型ガードや型アサーションを適切に使用します
- 型の互換性を理解し、適切な型の変換を行います

## 関数型プログラミングのプラクティスを適用します

- 純粋関数を優先
- 不変データ構造を使用
- 副作用のスコープを明確にし、純粋関数と副作用のある関数を分離

## アーキテクチャ

- ドメイン層、アプリケーション層、インフラ層を分離します
- ドメイン層はビジネスロジックを含み、アプリケーション層はユースケースを実装し、インフラ層は外部システムとの接続を管理します
- ドメイン駆動設計（DDD）を適用し、ドメインモデルを中心に設計します
- CQRS（Command Query Responsibility Segregation）を使用して、コマンドとクエリの責任を分離します
- UIとビジネスロジックを分離し、ドメインはUIに依存しないようにします

## テスト

- TDD（テスト駆動開発）を実践し、テストケースを先に書きます
- ユニットテスト、統合テスト、エンドツーエンドテストを適切に組み合わせて使用します
- テストにはVitestを使用します
  - ルートからnpm run testで実行します
- vitestはウォッチモードではなく、常にrunモードで実行します
- テストはドメインロジックの正確性を保証するために重要であり、ビジネス要件を満たすことを確認します
- テストはドメインモデルの振る舞いを検証し、将来の変更に対する回帰テストとして機能します
- 型で保障された入出力について、その型ではない値が渡された場合のテストは行いません

## ドキュメンテーション
- ドメインモデルの設計とビジネスロジックの説明を含むドキュメントを作成します
- ドメインの概念、ユースケース、ビジネスルールを明確に文書化します
- docsディレクトリにドキュメントを配置し、README.mdを使用してプロジェクトの概要を提供します
- ドキュメントは常に最新の状態に保ち、コードの変更に合わせて更新します
- 機能単位でのドキュメントを作成し、各機能の目的、使用方法、制約を明確にします

## リファクタリング
- 3か所以上の同じ目的のコードや重複があれば、リファクタリングを行います
- コードの重複を避け、再利用可能なコンポーネントを作成します

## コードの品質
- コードは読みやすく、理解しやすいように書きます
- コードの一貫性を保つために、スタイルガイドに従います
- 何か変更を加えたらその都度Lint, Test, Formatを実行し、エラー、警告がないことを確認します
- 作業を完了させる前に、Lint, Test, Formatを実行し、エラー、警告がないことを確認します
- 作業が完了したら、コミットメッセージを明確に記述し、変更内容を説明します
